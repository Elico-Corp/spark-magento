<?php
$res = array();
$fields = array(
    'x_mmx_scale' => array('type' => 'int', 'id' => 148),
    'custom_manufacturer' => array('type' => 'varchar', 'id' => 143),
    'x_mmx_model' => array('type' => 'int', 'id' => 152),
    'model_year' => array('type' => 'varchar', 'id' => 141),
    'x_mmx_race_edition' => array('type' => 'int', 'id' => 155),
    'race_edition_year' => array('type' => 'varchar', 'id' => 150),
    'x_mmx_driver' => array('type' => 'many2many', 'id' => 151),
    'year' => array('type' => 'varchar', 'id' => 139),
);

$sql = '';

$sql_int = '';
$sql_varchar = '';
$sql_many2many = '';
$arr_int = array();
$arr_varchar = array();
$arr_many2many = array();

foreach($fields as $key => $field) {
    $res[$key] = array('' => '');
    // make an inner join for every field that we want to filter with a value
    if(isset($_POST[$key]) and !empty($_POST[$key])) {
         ${'sql_' . $field['type']} .= "INNER JOIN catalog_product_entity_".$field['type']." AS at_". $key ."\n\t
                                        ON  (product.entity_id = at_". $key .".entity_id and at_". $key .".value = '".addslashes($_POST[$key])."')";
    } else {
        // fields that are not filtered by value but by other field.
        ${'arr_' . $field['type']}[] = $field['id'];
    }
}


// Build the sql for char attribute
if(count($arr_varchar) > 0) {
    $sql .= "SELECT eav.attribute_code as code, attribute.value as column_id, attribute.value as label\n
            FROM catalog_product_entity as product\n
            INNER JOIN catalog_category_product_index AS cat_index\n\t
                ON cat_index.product_id=product.entity_id AND cat_index.category_id='".(int)$_POST['category']."'";

    $sql .= $sql_varchar;
    $sql .= "INNER JOIN catalog_product_entity_varchar AS attribute\n\t
                 ON  (attribute.entity_id = product.entity_id and attribute.attribute_id in (". implode(',', $arr_varchar)."))\n
             INNER JOIN eav_attribute AS eav\n\t
                ON eav.attribute_id = attribute.attribute_id GROUP BY code, column_id, label\n";
}
 
// check if union is needed   
if($sql != '' and count($arr_int) > 0) {
    $sql .= 'UNION ';
}

// Build the sql for int
if(count($arr_int) > 0) {
    $sql .= "SELECT eav.attribute_code as code, attribute.value as column_id, attribute_label.value as label\n
            FROM catalog_product_entity as product\n
            INNER JOIN catalog_category_product_index AS cat_index\n\t
                ON cat_index.product_id=product.entity_id AND cat_index.category_id='".(int)$_POST['category']."'";
    $sql .= $sql_int;
    $sql .= "INNER JOIN catalog_product_entity_int AS attribute\n\t
                ON  (attribute.entity_id = product.entity_id and attribute.attribute_id in (". implode(',', $arr_int)."))\n
            INNER JOIN eav_attribute_option_value AS attribute_label\n\t
                ON(attribute.value = attribute_label.option_id)\n
            INNER JOIN eav_attribute AS eav\n\t
                ON eav.attribute_id = attribute.attribute_id GROUP BY code, column_id, label\n";
}

// check if union is needed   
if($sql != '' and count($arr_many2many) > 0) {
    $sql .= 'UNION ';
}

// Build the sql for many2many
if(count($arr_many2many) > 0) {
    $sql .= "SELECT eav.attribute_code as code, SUBSTRING_INDEX(SUBSTRING_INDEX(attribute.value, ',', numbers.n), ',', -1) as column_id, attribute_label.value as label\n
            FROM catalog_product_entity as product\n
            INNER JOIN catalog_category_product_index AS cat_index\n\t
                ON cat_index.product_id=product.entity_id AND cat_index.category_id='".(int)$_POST['category']."'";
    $sql .= $sql_many2many;
    $sql .= "INNER JOIN catalog_product_entity_int AS attribute\n\t
                ON  (attribute.entity_id = product.entity_id and attribute.attribute_id in (". implode(',', $arr_many2many)."))\n
	    INNER JOIN numbers 
         	ON CHAR_LENGTH(attribute.value) - CHAR_LENGTH(REPLACE(attribute.value, ',', '')) >=numbers.n-1\n
            INNER JOIN eav_attribute_option_value AS attribute_label\n\t
                ON(attribute_label.option_id = SUBSTRING_INDEX(SUBSTRING_INDEX(attribute.value, ',', numbers.n), ',', -1))\n
            INNER JOIN eav_attribute AS eav\n\t
                ON eav.attribute_id = attribute.attribute_id GROUP BY code, column_id, label\n";
}
// execute sql request
$resource = Mage::getSingleton('core/resource');
$readConnection = $resource->getConnection('core_read');
$rows = $readConnection->fetchAll($sql);

// prepare array for json
foreach($rows as $row) {
    $res[$row['code']][$row['column_id']] = $row['label'];
}
echo json_encode($res);
?>
